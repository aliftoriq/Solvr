package id.co.bcaf.solvr.controller;

import id.co.bcaf.solvr.dto.LoginRequest;
import id.co.bcaf.solvr.dto.ResponseTemplate;
import id.co.bcaf.solvr.model.services.AuthService;
import id.co.bcaf.solvr.utils.JwtUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/auth")
public class AuthController {
    private static final Logger logger = LoggerFactory.getLogger(AuthController.class);

    private final JwtUtil jwtUtil;
    private final AuthService authService;

    // Constructor injection
    public AuthController(JwtUtil jwtUtil, AuthService authService) {
        this.jwtUtil = jwtUtil;
        this.authService = authService;
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest loginRequest) {
        try {
            logger.info("Login attempt for username: {}", loginRequest.getUsername());

            String token = authService.authenticateUser(
                    loginRequest.getUsername(),
                    loginRequest.getPassword()
            );

            if (token == null) {
                logger.warn("Authentication failed for username: {}", loginRequest.getUsername());
                return ResponseEntity
                        .status(HttpStatus.UNAUTHORIZED)
                        .body(new ResponseTemplate(401, "Invalid username or password", null));
            }

            logger.info("Successful login for username: {}", loginRequest.getUsername());
            return ResponseEntity.ok(new ResponseTemplate(200, "Success", token));
        } catch (Exception e) {
            logger.error("Login error", e);
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ResponseTemplate(500, "Internal Server Error", null));
        }
    }

    @GetMapping("/test")
    public ResponseEntity<?> testToken(@RequestHeader("Authorization") String authHeader) {
        try {
            // Validate Authorization header
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                logger.warn("Invalid Authorization header");
                return ResponseEntity
                        .status(HttpStatus.UNAUTHORIZED)
                        .body("Invalid token format");
            }

            // Extract token
            String token = authHeader.substring(7);

            // Extract username
            String username = jwtUtil.extractUsername(token);

            logger.info("Token test successful for username: {}", username);
            return ResponseEntity.ok("Username: " + username);
        } catch (Exception e) {
            logger.error("Token validation error", e);
            return ResponseEntity
                    .status(HttpStatus.UNAUTHORIZED)
                    .body("Token validation failed");
        }
    }
}