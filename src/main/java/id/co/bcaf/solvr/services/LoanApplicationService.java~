package id.co.bcaf.solvr.services;

import id.co.bcaf.solvr.model.account.*;
import id.co.bcaf.solvr.repository.LoanApplicationRepository;
import id.co.bcaf.solvr.repository.LoanApplicationToEmployeeRepository;
import id.co.bcaf.solvr.repository.UserEmployeeRepository;
import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class LoanApplicationService {
    @Autowired
    private LoanApplicationRepository loanApplicationRepository;

    @Autowired
    private LoanApplicationToEmployeeRepository loanAplicationToEmployeeRepository;

    @Autowired
    UserService userService;

    @Autowired
    private UserEmployeeRepository userEmployeeRepository;

    @Autowired
    private UserCustomerService userCustomerService;

    @Autowired
    private LoanApplicationToEmployeeService loanApplicationToEmployeeService;

    @Autowired
    private BranchService branchService;


    public LoanApplication createApplication(UUID userID, LoanApplication loanApplication) {
        User user = userService.getUserById(userID);

        UUID userCustomerId = user.getUserCustomer().getId();

        UserCustomer userCustomer = userCustomerService.getUserCustomerById(userCustomerId);

        List<LoanApplication> activeLoans = loanApplicationRepository
                .findByUserCustomerAndStatusNot(userCustomer, "LUNAS");

        PlafonPackage plafonPackage = userCustomer.getPlafonPackage();
        if (plafonPackage == null) {
            throw new IllegalStateException("UserCustomer belum memiliki PlafonPackage yang valid. ");
        }

        double activeAmount = activeLoans.stream()
                .mapToDouble(LoanApplication::getLoanAmount)
                .sum();

        double newAmount = loanApplication.getLoanAmount();
        double totalAmount = activeAmount + newAmount;

        double maxAmount = plafonPackage.getAmount();

        loanApplication.setRequestedAt(LocalDateTime.now());

        if (totalAmount > maxAmount) {
            throw new IllegalStateException("Total tenor pinjaman melebihi plafon maksimum yang diizinkan. Max Ammount : " + maxAmount + " /n Total Ammount : " + totalAmount);
        }

//        LoanApplication existingApplication = loanApplicationRepository.save(loanApplication);

//        for (LoanApplicationToEmployee lae : loanApplication.getLoanApplicationToEmployees()) {
//            // Ambil UserEmployee dari DB
//            UUID userEmployeeId = lae.getUserEmployee().getId();
//            UserEmployee userEmployee = userEmployeeRepository.findById(userEmployeeId)
//                    .orElseThrow(() -> new RuntimeException("UserEmployee not found: " + userEmployeeId));
//
//            // Set ulang UserEmployee dan hubungan dengan parent LoanApplication
//            lae.setUserEmployee(userEmployee);
//            lae.setLoanApplication(loanApplication);
//        }

        // ===================== OTOMATISASI ASSIGN EMPLOYEE =====================
        Branch nearestBranch = branchService.getNearestBranch(loanApplication.getLatitude(), loanApplication.getLongitude());

        List<UserEmployee> userEmployeeList = userEmployeeRepository.findByBranchId(nearestBranch.getId());

        List<LoanApplicationToEmployee> employeeAssignments = new ArrayList<>();

        // Inisialisasi untuk pemilihan marketing
        List<UserEmployee> marketingList = new ArrayList<>();

        for (UserEmployee userEmployee : userEmployeeList) {
            String roleName = userEmployee.getUser().getRole().getName();

            if (roleName.equalsIgnoreCase("BRANCH MANAGER")) {
                LoanApplicationToEmployee lae = new LoanApplicationToEmployee();
                lae.setLoanApplication(loanApplication);
                lae.setUserEmployee(userEmployee);
                employeeAssignments.add(lae);
            } else if (roleName.equalsIgnoreCase("BACK OFFICE")) {
                LoanApplicationToEmployee lae = new LoanApplicationToEmployee();
                lae.setLoanApplication(loanApplication);
                lae.setUserEmployee(userEmployee);
                employeeAssignments.add(lae);
            } else if (roleName.equalsIgnoreCase("MARKETING")) {
                marketingList.add(userEmployee);
            }
        }

        // Pilih marketing dengan beban paling sedikit
        if (!marketingList.isEmpty()) {
            UserEmployee selectedMarketing = marketingList.stream()
                    .min(Comparator.comparing(m -> loanAplicationToEmployeeRepository.countByUserEmployeeId(m.getId())))
                    .orElseThrow(() -> new RuntimeException("Gagal memilih marketing"));

            LoanApplicationToEmployee laeMarketing = new LoanApplicationToEmployee();
            laeMarketing.setLoanApplication(loanApplication);
            laeMarketing.setUserEmployee(selectedMarketing);
            employeeAssignments.add(laeMarketing);
        }

        loanApplication.setLoanApplicationToEmployees(employeeAssignments);

        return loanApplicationRepository.save(loanApplication);
    }

    public List<LoanApplication> getAllApplications() {
        return loanApplicationRepository.findAll();
    }

    public List<LoanApplication> getAllCustomerMarketing(UUID userId) {
        User user = userService.getUserById(userId);
        if (user == null) {
            throw new EntityNotFoundException("User dengan ID " + userId + " tidak ditemukan");
        }

        UserEmployee userEmployee = user.getUserEmployee();
        if (userEmployee == null) {
            throw new IllegalArgumentException("User ini bukan karyawan/employee");
        }

        UUID employeeId = userEmployee.getId();

        List<LoanApplication> requestedLoans = loanApplicationRepository.findByEmployeeId(employeeId);

        // Filter to keep only REQUEST status
        List<LoanApplication> result = requestedLoans.stream()
                .filter(loan -> "REQUEST".equals(loan.getStatus()))
                .collect(Collectors.toList());

        return result;
    }

    public List<LoanApplication> getAllCustomerBranchManager(UUID userId) {
        User user = userService.getUserById(userId);
        if (user == null) {
            throw new EntityNotFoundException("User dengan ID " + userId + " tidak ditemukan");
        }

        UserEmployee userEmployee = user.getUserEmployee();
        if (userEmployee == null) {
            throw new IllegalArgumentException("User ini bukan karyawan/employee");
        }

        UUID employeeId = userEmployee.getId();

        List<LoanApplication> requestedLoans = loanApplicationRepository.findByEmployeeId(employeeId);

        // Filter to keep only REQUEST status
        List<LoanApplication> result = requestedLoans.stream()
                .filter(loan -> "REVIEWED".equals(loan.getStatus()))
                .collect(Collectors.toList());

        return result;
    }


    @Transactional
    public LoanApplication reviewLoanApplication(UUID userId, UUID loanAppId, String notes) {
        LoanApplication loanApplication = loanApplicationRepository.findById(loanAppId)
                .orElseThrow(() -> new EntityNotFoundException("LoanApplication dengan ID " + loanAppId + " tidak ditemukan"));

        UUID userEmployeeId = userService.getUserById(userId).getUserEmployee().getId();

        loanApplication.setStatus("REVIEWED");
        loanApplication.setReviewedAt(LocalDateTime.now());

        LoanApplicationToEmployee lae = loanApplication.getLoanApplicationToEmployees().stream()
                .filter(l -> l.getUserEmployee().getId().equals(userEmployeeId))
                .findFirst()
                .orElseThrow(() -> new EntityNotFoundException("LAE tidak ditemukan untuk employee ID: " + userEmployeeId));


        // Atau langsung update:
        lae.setNotes(notes);
        loanAplicationToEmployeeRepository.save(lae);

        return loanApplicationRepository.save(loanApplication);
    }

    @Transactional
    public LoanApplication approveLoanApplication(UUID userId, UUID loanAppId, String notes) {
        LoanApplication loanApplication = loanApplicationRepository.findById(loanAppId)
                .orElseThrow(() -> new EntityNotFoundException("LoanApplication dengan ID " + loanAppId + " tidak ditemukan"));

        loanApplication.setStatus("APPROVED");
        loanApplication.setApprovedAt(LocalDateTime.now());

        UUID userEmployeeId = userService.getUserById(userId).getUserEmployee().getId();

        LoanApplicationToEmployee lae = loanApplication.getLoanApplicationToEmployees().stream()
                .filter(l -> l.getUserEmployee().getId().equals(userEmployeeId))
                .findFirst()
                .orElseThrow(() -> new EntityNotFoundException("LAE tidak ditemukan untuk employee ID: " + userEmployeeId));


        // Atau langsung update:
        lae.setNotes(notes);
        loanAplicationToEmployeeRepository.save(lae);

        return loanApplicationRepository.save(loanApplication);
    }

    @Transactional
    public LoanApplication disburseLoanApplication(UUID userId, UUID loanAppId, String notes) {
        LoanApplication loanApplication = loanApplicationRepository.findById(loanAppId)
                .orElseThrow(() -> new EntityNotFoundException("LoanApplication dengan ID " + loanAppId + " tidak ditemukan"));

        loanApplication.setStatus("DISBURSEMENT");
        loanApplication.setDisbursedAt(LocalDateTime.now());

        UUID userEmployeeId = userService.getUserById(userId).getUserEmployee().getId();

        LoanApplicationToEmployee lae = loanApplication.getLoanApplicationToEmployees().stream()
                .filter(l -> l.getUserEmployee().getId().equals(userEmployeeId))
                .findFirst()
                .orElseThrow(() -> new EntityNotFoundException("LAE tidak ditemukan untuk employee ID: " + userEmployeeId));


        // Atau langsung update:
        lae.setNotes(notes);
        loanAplicationToEmployeeRepository.save(lae);

        return loanApplicationRepository.save(loanApplication);
    }
}
